# -*- coding: utf-8 -*-
import telebot
from telebot import types

token = '1241832800:AAG3I5W_z_f76yKdHuzscIFDIOI8qljRFvM'


vacname = ''
companyname = ''
reqs = []
resps = []
terms = []
salary = ''

explanations = '–û—Ç–ª–∏—á–Ω–æ üëç\n\n–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –º—ã –Ω–∞—á–Ω—ë–º, –æ–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–æ—è—Å–Ω–µ–Ω–∏—è –Ω–∏–∂–µ:\n\nüìç–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è - –Ω–∞–≤—ã–∫–∏, –æ–ø—ã—Ç, –≤–æ–∑—Ä–∞—Å—Ç, –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —Ç–¥\n\nüìç–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ - —á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞ —ç—Ç–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏\n\nüìç–£—Å–ª–æ–≤–∏—è - –≥—Ä–∞—Ñ–∏–∫, –∑–∞–Ω—è—Ç–æ—Å—Ç—å, –æ—Ñ–∏—Å –∏ —Ç–¥\n\n‚ùóÔ∏è–≤—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–æ 5 –ø—É–Ω–∫—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –≤—ã–¥–µ–ª—è–π —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ‚ùóÔ∏è\n\nüìç–ó–∞—Ä–ø–ª–∞—Ç–∞ - –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç (–Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —É—Å–ª–æ–≤–∏—è—Ö!)'

bot = telebot.TeleBot(token)


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π
markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
item1 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
# item2 = types.KeyboardButton("–†–µ–∑—é–º–µ")
markup.add(item1)


markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
item11 = types.KeyboardButton("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥")
item12 = types.KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å")
item13 = types.KeyboardButton("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å")
markup1.add(item11, item12, item13)


markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
item21 = types.KeyboardButton("–¢–∞—Ä–∏—Ñ 1")
item22 = types.KeyboardButton("–¢–∞—Ä–∏—Ñ 2")
item23 = types.KeyboardButton("–¢–∞—Ä–∏—Ñ 3")
markup2.add(item21, item22, item23)


markuppp = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
item32 = types.KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å")
item33 = types.KeyboardButton("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å")
markuppp.add(item32, item33)

markupexp = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
itemexp = types.KeyboardButton("–ü–æ–Ω—è—Ç–Ω–æ")
markupexp.add(itemexp)

@bot.message_handler(commands=['start'])
def welcome(message):
    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(message.from_user,
                                                                                                    bot.get_me()),
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(content_types=["text"])
def ans(message):
    global explanations
    textus = message.text
    if textus == '–î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é':
        msg = bot.send_message(message.chat.id, explanations, parse_mode='html', reply_markup=markupexp)
        bot.register_next_step_handler(msg, expl)
#    elif textus == '–†–µ–∑—é–º–µ':
#       bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –§–ò–û', reply_markup=markup1)
    else:
        bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é', reply_markup=markup)


def expl(message):
    textus = message.text
    if textus == '–ü–æ–Ω—è—Ç–Ω–æ':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏', reply_markup=markuppp)
        bot.register_next_step_handler(msg, vac)
    else:
        bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é', reply_markup=markupexp)



def vac(message):
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '–ö–æ–º—É —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫(–∫–æ–º–ø–∞–Ω–∏—è/–±–ª–æ–≥–µ—Ä –∏ —Ç.–ø.)?', reply_markup=markuppp)
        bot.register_next_step_handler(msg, company)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        msg1 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg1, ans)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        global vacname
        vacname = textus
        msg = bot.send_message(message.chat.id, '–ö–æ–º—É —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫(–∫–æ–º–ø–∞–Ω–∏—è/–±–ª–æ–≥–µ—Ä –∏ —Ç.–ø.)?', reply_markup=markuppp)
        bot.register_next_step_handler(msg, company)


def company(message):
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg, req1)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        msg1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏', reply_markup=markup1)
        bot.register_next_step_handler(msg1, vac)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        global companyname
        companyname = textus
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg, req1)


def req1(message):
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å', reply_markup=markup1)
        bot.register_next_step_handler(msg, resp1)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        msg1 = bot.send_message(message.chat.id, '–ö–æ–º—É —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫(–∫–æ–º–ø–∞–Ω–∏—è/–±–ª–æ–≥–µ—Ä –∏ —Ç.–ø.)?', reply_markup=markup1)
        bot.register_next_step_handler(msg1, company)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        global reqs
        reqs.append(textus)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg, req2)


def req2(message):
    global reqs
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å', reply_markup=markup1)
        bot.register_next_step_handler(msg, resp1)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        del reqs[len(reqs) - 1]
        msg1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg1, req1)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        reqs.append(textus)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ—Ç—å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg, req3)


def req3(message):
    global reqs
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å', reply_markup=markup1)
        bot.register_next_step_handler(msg, resp1)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        del reqs[len(reqs) - 1]
        msg1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg1, req2)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        reqs.append(textus)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–µ—Ç–≤—ë—Ä—Ç–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg, req4)


def req4(message):
    global reqs
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å', reply_markup=markup1)
        bot.register_next_step_handler(msg, resp1)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        del reqs[len(reqs) - 1]
        msg1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ—Ç—å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg1, req3)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        reqs.append(textus)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—è—Ç–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg, req5)


def req5(message):
    global reqs
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å', reply_markup=markup1)
        bot.register_next_step_handler(msg, resp1)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        del reqs[len(reqs) - 1]
        msg1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–µ—Ç–≤—ë—Ä—Ç–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg1, req4)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        reqs.append(textus)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å', reply_markup=markup1)
        bot.register_next_step_handler(msg, resp1)


def resp1(message):
    global reqs
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —É—Å–ª–æ–≤–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg, term1)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        del reqs[len(reqs)-1]
        msg1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—è—Ç–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg1, req5)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        global resps
        resps.append(textus)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å', reply_markup=markup1)
        bot.register_next_step_handler(msg, resp2)


def resp2(message):
    global resps
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —É—Å–ª–æ–≤–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg, term1)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        del resps[len(resps) - 1]
        msg1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å', reply_markup=markup1)
        bot.register_next_step_handler(msg1, resp1)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        resps.append(textus)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ—Ç—å—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å', reply_markup=markup1)
        bot.register_next_step_handler(msg, resp3)


def resp3(message):
    global resps
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —É—Å–ª–æ–≤–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg, term1)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        del resps[len(resps) - 1]
        msg1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å', reply_markup=markup1)
        bot.register_next_step_handler(msg1, resp2)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        resps.append(textus)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–µ—Ç–≤—ë—Ä—Ç—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å', reply_markup=markup1)
        bot.register_next_step_handler(msg, resp4)


def resp4(message):
    global resps
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —É—Å–ª–æ–≤–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg, term1)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        del resps[len(resps) - 1]
        msg1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ—Ç—å—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å', reply_markup=markup1)
        bot.register_next_step_handler(msg1, resp3)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        resps.append(textus)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—è—Ç—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å', reply_markup=markup1)
        bot.register_next_step_handler(msg, resp5)


def resp5(message):
    global resps
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —É—Å–ª–æ–≤–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg, term1)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        del resps[len(resps) - 1]
        msg1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–µ—Ç–≤—ë—Ä—Ç—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å', reply_markup=markup1)
        bot.register_next_step_handler(msg1, resp4)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        resps.append(textus)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —É—Å–ª–æ–≤–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg, term1)


def term1(message):
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É', reply_markup=markup1)
        bot.register_next_step_handler(msg, sala)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        global resps
        del resps[len(resps) - 1]
        msg1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—è—Ç—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å', reply_markup=markup1)
        bot.register_next_step_handler(msg1, resp5)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        global terms
        terms.append(textus)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —É—Å–ª–æ–≤–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg, term2)


def term2(message):
    global terms
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É', reply_markup=markup1)
        bot.register_next_step_handler(msg, sala)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        del terms[len(terms) - 1]
        msg1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —É—Å–ª–æ–≤–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg1, term1)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        terms.append(textus)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ—Ç—å–µ —É—Å–ª–æ–≤–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg, term3)


def term3(message):
    global terms
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É', reply_markup=markup1)
        bot.register_next_step_handler(msg, sala)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        del terms[len(terms) - 1]
        msg1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —É—Å–ª–æ–≤–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg1, term2)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        terms.append(textus)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–µ—Ç–≤—ë—Ä—Ç–æ–µ —É—Å–ª–æ–≤–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg, term4)


def term4(message):
    global terms
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É', reply_markup=markup1)
        bot.register_next_step_handler(msg, sala)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        del terms[len(terms) - 1]
        msg1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ—Ç—å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg1, term3)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        terms.append(textus)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—è—Ç–æ–µ —É—Å–ª–æ–≤–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg, term5)


def term5(message):
    global terms
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É', reply_markup=markup1)
        bot.register_next_step_handler(msg, sala)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        del terms[len(terms) - 1]
        msg1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–µ—Ç–≤—ë—Ä—Ç–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg1, term4)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        terms.append(textus)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É', reply_markup=markup1)
        bot.register_next_step_handler(msg, sala)


def sala(message):
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ', reply_markup=markup2)
        bot.register_next_step_handler(msg, tariff)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        del terms[len(terms) - 1]
        msg1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—è—Ç–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ', reply_markup=markup1)
        bot.register_next_step_handler(msg1, term5)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        global salary
        salary = textus
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ (—Ç–∞—Ä–∏—Ñ—ã —É–∫–∞–∑–∞–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –±–æ—Ç–∞)', reply_markup=markup2)
        bot.register_next_step_handler(msg, tariff)


def tariff(message):
    global vacname
    global companyname
    global reqs
    global resps
    global terms
    global salary
    request = '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n'
    respon = '–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:\n'
    termm = '–£—Å–ª–æ–≤–∏—è:\n'
    name = '@' + message.from_user.username
    textus = message.text
    tarif = textus

    for req in reqs:
        request += str('- ') + req + '\n'

    for resp in resps:
        respon += str('- ') + resp + '\n'

    for ter in terms:
        termm += str('- ') + ter + '\n'

    finish = '–í–∞–∫–∞–Ω—Å–∏—è: ' + vacname + '\n' + '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: ' + companyname + '\n' + request + respon + termm +\
             '–ó–∞—Ä–ø–ª–∞—Ç–∞ - ' + salary + '\n' + tarif + '\n' + '–û—Ç–ø—Ä–∞–≤–∏–ª ' + name
    terms = []
    resps = []
    reqs = []
    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä', reply_markup=markup)
    bot.send_message('@vaccccan', finish)


if __name__ == '__main__':
     bot.infinity_polling()