# -*- coding: utf-8 -*-
import telebot
from telebot import types

token = '1241832800:AAE3eEk5Z3cuF2S8lRNZLvy7Wqxt8uzyFhM'


vacname = ''
companyname = ''
reqs = []
resps = []
terms = []
salary = ''

explanations = '–û—Ç–ª–∏—á–Ω–æ üëç\n\n–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –º—ã –Ω–∞—á–Ω—ë–º, –æ–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–æ—è—Å–Ω–µ–Ω–∏—è –Ω–∏–∂–µ:\n\nüìç–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è - –Ω–∞–≤—ã–∫–∏, –æ–ø—ã—Ç, –≤–æ–∑—Ä–∞—Å—Ç, –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —Ç–¥\n\nüìç–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ - —á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞ —ç—Ç–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏\n\nüìç–£—Å–ª–æ–≤–∏—è - –≥—Ä–∞—Ñ–∏–∫, –∑–∞–Ω—è—Ç–æ—Å—Ç—å, –æ—Ñ–∏—Å –∏ —Ç–¥\n\n‚ùóÔ∏è–≤—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–æ 5 –ø—É–Ω–∫—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –≤—ã–¥–µ–ª—è–π —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ‚ùóÔ∏è\n\nüìç–ó–∞—Ä–ø–ª–∞—Ç–∞ - –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç (–Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —É—Å–ª–æ–≤–∏—è—Ö!)'
employer = "<b>–ö—Ç–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å?</b>\n(–µ—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è - —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ/–µ—Å–ª–∏ –±–ª–æ–≥–µ—Ä - —É–∫–∞–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç)"
req01 = "<b>Ô∏è–ù–∞—á–Ω—ë–º —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π</b>‚ùó\n\nüìç<b>–ö–∞–∫–æ–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—ã—Ç?</b>\n(–∫–æ–ª-–≤–æ –ª–µ—Ç –ª–∏–±–æ ¬´–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è¬ª)"
req02 = "üìç<b>–ö–∞–∫–∏–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ –¥–æ–ª–∂–µ–Ω –≤–ª–∞–¥–µ—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç?</b>\n(–ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è)"
req03 = "üìç<b>–ì–¥–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∂–∏–≤–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç?</b>\n(–≥–æ—Ä–æ–¥/–Ω–µ–≤–∞–∂–Ω–æ)"
req04 = "üìç<b>–ö–∞–∫–∏–º–∏ –µ—â–µ –Ω–∞–≤—ã–∫–∞–º–∏ –¥–æ–ª–∂–µ–Ω –æ–±–ª–∞–¥–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç?</b>"
req05 = "üìç<b>–ß—Ç–æ-—Ç–æ –µ—â—ë?</b>\n(–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —É–ø—É—Å—Ç–∏–ª–∏ - –¥–æ–ø–∏—à–∏—Ç–µ –∑–¥–µ—Å—å, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —à–∞–≥ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞)"

term01 = "<b>–ó–∞–≤–µ—Ä—à–∏–º —É—Å–ª–æ–≤–∏—è–º–∏</b>‚ùóÔ∏è\n\nüìç<b>–í–≤–µ–¥–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã</b>\n(—Å–≤–æ–±–æ–¥–Ω—ã–π, 5/2 –∏ —Ç.–ø.)"
term02 = "üìç<b>–†–∞–±–æ—Ç–∞ —É–¥–∞–ª—ë–Ω–Ω–∞—è –∏–ª–∏ –≤ –æ—Ñ–∏—Å–µ?</b>\n(–µ—Å–ª–∏ –≤ –æ—Ñ–∏—Å–µ, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –µ–≥–æ –∞–¥—Ä–µ—Å)"
term03 = "üìç<b>–ß—Ç–æ-—Ç–æ –µ—â—ë?</b>\n(–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —É–ø—É—Å—Ç–∏–ª–∏ - –¥–æ–ø–∏—à–∏—Ç–µ –∑–¥–µ—Å—å, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —à–∞–≥ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞)"
salarytext = "üìç<b>–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞</b>\n(—É–∫–∞–∂–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É –≤ –º–µ—Å—è—Ü –∏–ª–∏ —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã)"
bot = telebot.TeleBot(token)


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π
markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
item1 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
# item2 = types.KeyboardButton("–†–µ–∑—é–º–µ")
markup.add(item1)


markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
item11 = types.KeyboardButton("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥")
item12 = types.KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å")
item13 = types.KeyboardButton("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å")
markup1.add(item11, item12, item13)


markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
item21 = types.KeyboardButton("–¢–∞—Ä–∏—Ñ 1")
item22 = types.KeyboardButton("–¢–∞—Ä–∏—Ñ 2")
item23 = types.KeyboardButton("–¢–∞—Ä–∏—Ñ 3")
markup2.add(item21, item22, item23)


markuppp = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
item32 = types.KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å")
item33 = types.KeyboardButton("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å")
markuppp.add(item32, item33)

markupexp = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
itemexp = types.KeyboardButton("–ü–æ–Ω—è—Ç–Ω–æ")
markupexp.add(itemexp)

@bot.message_handler(commands=['start'])
def welcome(message):
    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(message.from_user,
                                                                                                    bot.get_me()),
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(content_types=["text"])
def ans(message):
    global explanations
    textus = message.text
    if textus == '–î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é':
        msg = bot.send_message(message.chat.id, explanations, parse_mode='html', reply_markup=markupexp)
        bot.register_next_step_handler(msg, expl)
#    elif textus == '–†–µ–∑—é–º–µ':
#       bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –§–ò–û', reply_markup=markup1)
    else:
        bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é', reply_markup=markup)


def expl(message):
    textus = message.text
    if textus == '–ü–æ–Ω—è—Ç–Ω–æ':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏', reply_markup=markuppp)
        bot.register_next_step_handler(msg, vac)
    else:
        msg1 = bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é', reply_markup=markupexp)
        bot.register_next_step_handler(msg1, expl)



def vac(message):
    global employer
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, employer, parse_mode='html', reply_markup=markuppp)
        bot.register_next_step_handler(msg, company)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        msg1 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg1, ans)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        global vacname
        vacname = textus
        msg = bot.send_message(message.chat.id, employer, parse_mode='html', reply_markup=markuppp)
        bot.register_next_step_handler(msg, company)


def company(message):
    global req01
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, req01, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, req1)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        msg1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏', reply_markup=markup1)
        bot.register_next_step_handler(msg1, vac)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        global companyname
        companyname = textus
        msg = bot.send_message(message.chat.id, req01, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, req1)



def req1(message):
    global req02
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '<b>Ô∏è–ü–µ—Ä–µ–π–¥—ë–º –∫ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è–º</b>‚ùó\n(1 —Å–æ–æ–±—â–µ–Ω–∏–µ = 1 –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å, –≤—Å–µ–≥–æ –¥–æ 5 —à—Ç—É–∫)\n\nüìç–í–≤–µ–¥–∏—Ç–µ <b>–ø–µ—Ä–≤—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å</b> (—á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫)', parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, resp1)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        msg1 = bot.send_message(message.chat.id, employer, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg1, company)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        global reqs
        reqs.append(textus)
        msg = bot.send_message(message.chat.id, req02, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, req2)


def req2(message):
    global req01
    global req03
    global reqs
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '<b>Ô∏è–ü–µ—Ä–µ–π–¥—ë–º –∫ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è–º</b>‚ùó\n(1 —Å–æ–æ–±—â–µ–Ω–∏–µ = 1 –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å, –≤—Å–µ–≥–æ –¥–æ 5 —à—Ç—É–∫)\n\nüìç–í–≤–µ–¥–∏—Ç–µ <b>–ø–µ—Ä–≤—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å</b> (—á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫)', parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, resp1)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        if len(reqs) != 0:
            del reqs[len(reqs) - 1]
        msg1 = bot.send_message(message.chat.id, req01, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg1, req1)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        reqs.append(textus)
        msg = bot.send_message(message.chat.id, req03, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, req3)


def req3(message):
    global req02
    global req04
    global reqs
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '<b>Ô∏è–ü–µ—Ä–µ–π–¥—ë–º –∫ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è–º</b>‚ùó\n(1 —Å–æ–æ–±—â–µ–Ω–∏–µ = 1 –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å, –≤—Å–µ–≥–æ –¥–æ 5 —à—Ç—É–∫)\n\nüìç–í–≤–µ–¥–∏—Ç–µ <b>–ø–µ—Ä–≤—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å</b> (—á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫)', parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, resp1)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        if len(reqs) != 0:
            del reqs[len(reqs) - 1]
        msg1 = bot.send_message(message.chat.id, req02, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg1, req2)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        reqs.append(textus)
        msg = bot.send_message(message.chat.id, req04, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, req4)


def req4(message):
    global req03
    global req05
    global reqs
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '<b>Ô∏è–ü–µ—Ä–µ–π–¥—ë–º –∫ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è–º</b>‚ùó\n(1 —Å–æ–æ–±—â–µ–Ω–∏–µ = 1 –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å, –≤—Å–µ–≥–æ –¥–æ 5 —à—Ç—É–∫)\n\nüìç–í–≤–µ–¥–∏—Ç–µ <b>–ø–µ—Ä–≤—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å</b> (—á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫)', parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, resp1)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        if len(reqs) != 0:
            del reqs[len(reqs) - 1]
        msg1 = bot.send_message(message.chat.id, req03, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg1, req3)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        reqs.append(textus)
        msg = bot.send_message(message.chat.id, req05, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, req5)


def req5(message):
    global req04
    global reqs
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '<b>Ô∏è–ü–µ—Ä–µ–π–¥—ë–º –∫ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è–º</b>‚ùó\n(1 —Å–æ–æ–±—â–µ–Ω–∏–µ = 1 –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å, –≤—Å–µ–≥–æ –¥–æ 5 —à—Ç—É–∫)\n\nüìç–í–≤–µ–¥–∏—Ç–µ <b>–ø–µ—Ä–≤—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å</b> (—á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫)', parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, resp1)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        if len(reqs) != 0:
            del reqs[len(reqs) - 1]
        msg1 = bot.send_message(message.chat.id, req04, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg1, req4)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        reqs.append(textus)
        msg = bot.send_message(message.chat.id, '<b>Ô∏è–ü–µ—Ä–µ–π–¥—ë–º –∫ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è–º</b>‚ùó\n(1 —Å–æ–æ–±—â–µ–Ω–∏–µ = 1 –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å, –≤—Å–µ–≥–æ –¥–æ 5 —à—Ç—É–∫)\n\nüìç–í–≤–µ–¥–∏—Ç–µ <b>–ø–µ—Ä–≤—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å</b> (—á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫)', parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, resp1)


def resp1(message):
    global term01
    global req05
    global reqs
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, term01, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, term1)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        if len(reqs) != 0:
            del reqs[len(reqs) - 1]
        msg1 = bot.send_message(message.chat.id, req05, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg1, req5)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        global resps
        resps.append(textus)
        msg = bot.send_message(message.chat.id, 'üìç–í–≤–µ–¥–∏—Ç–µ <b>–≤—Ç–æ—Ä—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å</b> (—á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫)', parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, resp2)


def resp2(message):
    global term01
    global resps
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, term01, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, term1)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        if len(resps) != 0:
            del resps[len(resps) - 1]
        msg1 = bot.send_message(message.chat.id, '<b>Ô∏è–ü–µ—Ä–µ–π–¥—ë–º –∫ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è–º</b>‚ùó\n(1 —Å–æ–æ–±—â–µ–Ω–∏–µ = 1 –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å, –≤—Å–µ–≥–æ –¥–æ 5 —à—Ç—É–∫)\n\nüìç–í–≤–µ–¥–∏—Ç–µ <b>–ø–µ—Ä–≤—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å</b> (—á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫)', parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg1, resp1)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        resps.append(textus)
        msg = bot.send_message(message.chat.id, 'üìç–í–≤–µ–¥–∏—Ç–µ <b>—Ç—Ä–µ—Ç—å—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å</b> (—á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫)', parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, resp3)


def resp3(message):
    global term01
    global resps
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, term01, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, term1)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        if len(resps) != 0:
            del resps[len(resps) - 1]
        msg1 = bot.send_message(message.chat.id, 'üìç–í–≤–µ–¥–∏—Ç–µ <b>–≤—Ç–æ—Ä—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å</b> (—á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫)', parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg1, resp2)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        resps.append(textus)
        msg = bot.send_message(message.chat.id, 'üìç–í–≤–µ–¥–∏—Ç–µ <b>—á–µ—Ç–≤—ë—Ä—Ç—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å</b> (—á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫)', parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, resp4)


def resp4(message):
    global term01
    global resps
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, term01, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, term1)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        if len(resps) != 0:
            del resps[len(resps) - 1]
        msg1 = bot.send_message(message.chat.id, 'üìç–í–≤–µ–¥–∏—Ç–µ <b>—Ç—Ä–µ—Ç—å—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å</b> (—á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫)', parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg1, resp3)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        resps.append(textus)
        msg = bot.send_message(message.chat.id, 'üìç–í–≤–µ–¥–∏—Ç–µ <b>–ø—è—Ç—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å</b> (—á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫)', parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, resp5)


def resp5(message):
    global term01
    global resps
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, term01, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, term1)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        if len(resps) != 0:
            del resps[len(resps) - 1]
        msg1 = bot.send_message(message.chat.id, 'üìç–í–≤–µ–¥–∏—Ç–µ <b>—á–µ—Ç–≤—ë—Ä—Ç—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å</b> (—á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫)', parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg1, resp4)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        resps.append(textus)
        msg = bot.send_message(message.chat.id, term01, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, term1)


def term1(message):
    global term02
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, salarytext, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, sala)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        global resps
        if len(resps) != 0:
            del resps[len(resps) - 1]
        msg1 = bot.send_message(message.chat.id, 'üìç–í–≤–µ–¥–∏—Ç–µ <b>–ø—è—Ç—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å</b> (—á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫)', parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg1, resp5)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        global terms
        terms.append(textus)
        msg = bot.send_message(message.chat.id, term02, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, term2)


def term2(message):
    global term03
    global term01
    global terms
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, salarytext, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, sala)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        if len(terms) != 0:
            del terms[len(terms) - 1]
        msg1 = bot.send_message(message.chat.id, term01, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg1, term1)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        terms.append(textus)
        msg = bot.send_message(message.chat.id, term03, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, term3)


def term3(message):
    global salarytext
    global term02
    global terms
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, salarytext, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, sala)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        if len(terms) != 0:
            del terms[len(terms) - 1]
        msg1 = bot.send_message(message.chat.id, term02, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg1, term2)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        terms.append(textus)
        msg = bot.send_message(message.chat.id, salarytext, parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, sala)


def sala(message):
    textus = message.text
    if textus == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥":
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ', reply_markup=markup2)
        bot.register_next_step_handler(msg, tariff)
    elif textus == "–û—Ç–º–µ–Ω–∏—Ç—å":
        if len(terms) != 0:
            del terms[len(terms) - 1]
        msg1 = bot.send_message(message.chat.id, 'üìç–í–≤–µ–¥–∏—Ç–µ <b>–ø—è—Ç–æ–µ —É—Å–ª–æ–≤–∏–µ</b> (–≥—Ä–∞—Ñ–∏–∫, –∑–∞–Ω—è—Ç–æ—Å—Ç—å, –æ—Ñ–∏—Å –∏ —Ç.–¥.)', parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg1, term3)
    elif textus == "/start" or textus == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        msg3 = bot.send_message(message.chat.id,
                                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>".format(
                                    message.from_user, bot.get_me()),
                                parse_mode='html', reply_markup=markup)
        bot.register_next_step_handler(msg3, ans)
    else:
        global salary
        salary = textus
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:\n–¢–∞—Ä–∏—Ñ 1:\n-–¥–µ–Ω—å –≤ –¥–µ–Ω—å\n-300‚ÇΩ\n\n–¢–∞—Ä–∏—Ñ 2:\n-–≤ —Ç–µ—á–µ–Ω–∏–µ 3—Ö –¥–Ω–µ–π\n-200‚ÇΩ\n\n–¢–∞—Ä–∏—Ñ 3:\n-–≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏\n-100‚ÇΩ', reply_markup=markup2)
        bot.register_next_step_handler(msg, tariff)


def tariff(message):
    global vacname
    global companyname
    global reqs
    global resps
    global terms
    global salary
    request = '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n'
    respon = '–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:\n'
    termm = '–£—Å–ª–æ–≤–∏—è:\n'
    name = '@' + message.from_user.username
    textus = message.text
    tarif = textus

    for req in reqs:
        request += str('- ') + req + '\n'

    for resp in resps:
        respon += str('- ') + resp + '\n'

    for ter in terms:
        termm += str('- ') + ter + '\n'

    finish = '–í–∞–∫–∞–Ω—Å–∏—è: ' + vacname + '\n' + '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: ' + companyname + '\n' + request + respon + termm +\
             '–ó–∞—Ä–ø–ª–∞—Ç–∞ - ' + salary + '\n' + tarif + '\n' + '–û—Ç–ø—Ä–∞–≤–∏–ª ' + name
    terms = []
    resps = []
    reqs = []
    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä', reply_markup=markup)
    bot.send_message('@vaccccan', finish)


if __name__ == '__main__':
     bot.infinity_polling()